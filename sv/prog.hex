// Implementation of Affine Transformation as specified in Pseudocode from the brief
// n = 8 bits, Isize = 6+n = 14 bits
// format: 3b opcode, 3b rd, [3b rs or 8b immediate]
// 16 lines of code designed to match the program memory size (4 bits). This leads to inherent looping of the program without branches required.
// 
// HEX /////////// BINARY  ///////////// ASSEMBLER /////////
0200    // 14'b000_010_000_00000 	WLD0	r2, r0;	Wait for SW8 to become 0
2420    // 14'b100_100_001_00000	WLD1	r4,	r1;	Wait for SW8 to become 1 then load SW[7:0] into r4 as x1
0280    // 14'b000_010_100_00000	WLD0	r2,	r4;	Wait for SW8 to become 0 and copy x1 to r2
2520    // 14'b100_101_001_00000	WLD1	r5, r1;	Wait for SW8 to become 1 then load SW[7:0] into r5 as y1
03A0    // 14'b000_011_101_00000	WLD0	r3, r5;	Wait for SW8 to become 0 and copy y1 to r3
//  Start of Affine transformation with Dataset A for x2
3A60    // 14'b111_010_011_00000	MULTI	r2, 60;	r2 = x1 * 0.75. 0.75 = 0x60
3B40    // 14'b111_011_010_00000	MULTI	r3, 40;	r3 = y1 * 0.5. 0.5 = 0x40
0A60    // 14'b001_010_011_00000	ADD		r2, r3;	Add together top row in matrix for x2, store in r2 (LED output)
2A14    // 14'b101_010_000_10100	ADDI	r2, 14;	r2 = 20 + x2. Display x1 on LEDs.
2200    // 14'b100_010_000_00000	WLD1	r2, r0;	Wait for SW8 to become 1 and reset LED display.
//  Affine transformation with Dataset A for y2
0A80    // 14'b001_010_100_00000	ADD		r2, r4;	Copy x1 to register 2 
0BA0    // 14'b001_011_101_00000	ADD		r3, r5;	Copy y1 to register 3
3AC0    // 14'b111_010_110_00000	MULTI	r2, C0; r2 = x1 * -0.5. -0.5 = 0xC0
3B60    // 14'b111_011_011_00000	MULTI	r3, 60;	r3 = y1 * 0.75. 0.75 = 0x60
0A60    // 14'b001_010_011_00000	ADD		r2, r3;	Add together bottom row in matrix for y2, store in r2 (LED output)
3214    // 14'b110_010_000_10100	SUBI	r2, 14;	r2 = y2 - 20. Display y2 on LEDs
