// Implementation of affine transformation as specified in pseudocode from the brief
// n = 8 bits, Isize = 6+n = 14 bits
// format: 3b opcode, 3b rd, [3b rs or 8b immediate]
// 16 lines of code designed to match the program memory size (4 bits). This leads to inherent looping of the program without branches required.
// 
// HEX /////////// BINARY  ///////////// ASSEMBLER /////////
0200    // 14'b000_010_000_00000 	WLD0	r2, r0;		Wait for SW8 to become 0
2520    // 14'b100_101_001_00000	WLD1	r5,	r1;		Wait for SW8 to become 1 then load SW[7:0] into r5 as x1
03A0    // 14'b000_011_101_00000	WLD0	r3,	r5;		Wait for SW8 to become 0 and copy x1 to r3
2620    // 14'b100_110_001_00000	WLD1	r6, r1;		Wait for SW8 to become 1 then load SW[7:0] into r6 as y1
04C0    // 14'b000_100_110_00000	WLD0	r4, r6;		Wait for SW8 to become 0 and copy y1 to r4
//  Start of Affine transformation with Dataset A for x2
3B60    // 14'b111_011_011_00000	MULTI	r3, 60;		x1` = x1 * 0.75. 0.75 = 0x60
3C40    // 14'b111_100_010_00000	MULTI	r4, 40;		y1` = y1 * 0.5. 0.5 = 0x40
0B80    // 14'b001_011_100_00000	ADD		r3, r4;		x1` = x1` + y1`
2B14    // 14'b101_011_000_10100	ADDI	r3, 14;		x2 = x1` + 20. // x2 is now in r3
//  Affine transformation for y2
3DC0    // 14'b111_101_110_00000	MULTI	r5, C0; 	x1` = x1 * -0.5. -0.5 = 0xC0
3E60    // 14'b111_110_011_00000	MULTI	r6, 60;		y1` = y1 * 0.75. 0.75 = 0x60
0DC0    // 14'b001_101_110_00000	ADD		r5, r6;		y1` = x1` + y1`
2DEC    // 14'b101_101_111_01100	ADDI	r5, -14;	y2 = y1` - 20. // y2 is now in r5
3260	// 14'b110_010_011_00000	COPY	r2, r3; 	Copy x2 to LED output
22A0    // 14'b100_010_101_00000	WLD1	r2, r5;		Wait for SW8 to become 1 and Copy y2 to LED output.
0200	// 14'b110_010_000_00000	WLD0	r2, r0; 	Wait for SW8 to become 0
